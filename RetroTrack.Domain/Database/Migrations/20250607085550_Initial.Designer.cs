// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RetroTrack.Domain.Database.Context;

#nullable disable

namespace RetroTrack.Domain.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250607085550_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AchievementDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AchievementIcon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("AchievementType")
                        .HasColumnType("integer");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NumAwarded")
                        .HasColumnType("bigint");

                    b.Property<long>("NumAwardedHardcore")
                        .HasColumnType("bigint");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.DataCaching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CacheData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CacheName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinutesToCacheFor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DataCaching");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.EnvironmentalSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalSettings");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("AchievementCount")
                        .HasColumnType("integer");

                    b.Property<int>("ConsoleId")
                        .HasColumnType("integer");

                    b.Property<bool>("DiscordMessageProcessed")
                        .HasColumnType("boolean");

                    b.Property<bool>("EmailMessageProcessed")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExtraDataProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("GameGenre")
                        .HasColumnType("text");

                    b.Property<bool>("HasAchievements")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageIcon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastAchievementCountChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastExtraDataProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Players")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SetReleasedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.GameConsole", b =>
                {
                    b.Property<int>("ConsoleId")
                        .HasColumnType("integer");

                    b.Property<string>("ConsoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConsoleType")
                        .HasColumnType("integer");

                    b.Property<bool>("DisplayOnSite")
                        .HasColumnType("boolean");

                    b.Property<int>("GameCount")
                        .HasColumnType("integer");

                    b.Property<int>("NoAchievementsGameCount")
                        .HasColumnType("integer");

                    b.HasKey("ConsoleId");

                    b.ToTable("GameConsoles");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.RetroAchievementsLogAndLoadData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FailedProcessingAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RetroAchievementsLogAndLoadData");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.RetroAchievementsLogAndLoadError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ErrorTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogAndLoadDataId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LogAndLoadDataId");

                    b.ToTable("RetroAchievementsLogAndLoadErrors");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Session", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.TrackedGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("TrackedGames");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HashedPasswordMigrated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastAchievementsUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUserUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldHashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RAUserUlid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RAUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserPoints")
                        .HasColumnType("bigint");

                    b.Property<string>("UserProfileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.UserGameProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementsGained")
                        .HasColumnType("integer");

                    b.Property<int>("AchievementsGainedHardcore")
                        .HasColumnType("integer");

                    b.Property<int>("ConsoleId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<double>("GamePercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("GamePercentageHardcore")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("HighestAwardDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HighestAwardKind")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MostRecentAwardedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGameProgress");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Achievement", b =>
                {
                    b.HasOne("RetroTrack.Domain.Database.Models.Game", "Game")
                        .WithMany("Achievements")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Game", b =>
                {
                    b.HasOne("RetroTrack.Domain.Database.Models.GameConsole", "GameConsole")
                        .WithMany("Games")
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameConsole");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.RetroAchievementsLogAndLoadError", b =>
                {
                    b.HasOne("RetroTrack.Domain.Database.Models.RetroAchievementsLogAndLoadData", "LogAndLoadData")
                        .WithMany("Errors")
                        .HasForeignKey("LogAndLoadDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogAndLoadData");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Session", b =>
                {
                    b.HasOne("RetroTrack.Domain.Database.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.TrackedGame", b =>
                {
                    b.HasOne("RetroTrack.Domain.Database.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RetroTrack.Domain.Database.Models.User", "User")
                        .WithMany("TrackedGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.UserGameProgress", b =>
                {
                    b.HasOne("RetroTrack.Domain.Database.Models.GameConsole", "Console")
                        .WithMany()
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RetroTrack.Domain.Database.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RetroTrack.Domain.Database.Models.User", "User")
                        .WithMany("UserGameProgress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Console");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.Game", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.GameConsole", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.RetroAchievementsLogAndLoadData", b =>
                {
                    b.Navigation("Errors");
                });

            modelBuilder.Entity("RetroTrack.Domain.Database.Models.User", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("TrackedGames");

                    b.Navigation("UserGameProgress");
                });
#pragma warning restore 612, 618
        }
    }
}
