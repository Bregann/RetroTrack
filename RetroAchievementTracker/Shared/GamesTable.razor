@using RetroAchievementTracker.Data.GameData
@using RetroAchievementTracker.Data.Login
@using RetroAchievementTracker.Data.TableData
@using RetroAchievementTracker.Data.Enums
@using RetroAchievementTracker.Shared.Dialogs

@inject GameDataService GameDataModalService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject LoginService LoginService;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject TableDataService TableDataService;

@if(DataInTable != null)
{
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="DataInTable" Hover=true Striped=true Class="mt-3 mb-4" Elevation=5 OnRowClick="OpenGameModal" T="TableData" Filter="new Func<TableData,bool>(FilterGames)">
        <ToolBarContent>
            @if(LoggedIn)
            {
            <MudSwitch Label="Hide Completed" CheckedChanged="ChangeCompletedGamesToggle" T=bool Checked=hideCompleted Color=Color.Info/>
            <MudSwitch Label="Hide In Progress" CheckedChanged="ChangeInProgressToggle" T=bool Color=Color.Info/>
            }

            <MudSpacer />
            <MudTextField @bind-Value="@GameNameSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Game Icon</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.AchievementCount)" >Achievement Count</MudTableSortLabel></MudTh>
            @if(LoggedIn)
            {
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.AchievementsGained)">Achievements Gained</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.GamePercentage)" InitialDirection=SortDirection.Descending>Percentage Completed</MudTableSortLabel></MudTh>
            }
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.Genre)">Genre</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<TableData, object>(x=>x.PlayersCasual)">Players</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Game Icon"><MudImage Height="64" Width="64" Src="@context.ImageIconUrl" Class="rounded-lg"></MudImage></MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Achievement Count">@context.AchievementCount</MudTd>
            @if(LoggedIn)
            {
            <MudTd DataLabel="Achievements Gained">@context.AchievementsGained</MudTd>
            <MudTd DataLabel="Percentage Completed">@context.GamePercentage.ToString("P")</MudTd>
            }
            <MudTd DataLabel="Genre">@context.Genre</MudTd>
            <MudTd DataLabel="Players">@context.PlayersCasual.ToString("N0")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>
}



@code {
    [Parameter] public int ConsoleId{ get; set; }
    private List<TableData> TableData;
    private bool hideCompleted = true;
    private bool hideInProgress = false;
    private string GameNameSearch = "";
    private bool LoggedIn;
    private string LoggedInUser;

    private List<TableData> DataInTable = null;

    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            //Make sure it's a valid login and get the logged in user
            if(LoginService.ValidateUserLogin(await LocalStorage.GetItemAsync<string>("loginToken")))
            {
                LoggedIn = true;
                LoggedInUser = LoginService.GetLoggedInUser(await LocalStorage.GetItemAsync<string>("loginToken"));
            }

            TableData = TableDataService.GetConsoleTableData(ConsoleId, LoggedInUser);
            DataInTable = TableData.Where(x => x.GamePercentage != 1).ToList();
            StateHasChanged();
        }
    }

    private bool FilterGames(TableData data) => FilterFunc(data, GameNameSearch);

    private bool FilterFunc(TableData data, string searchString)
    {
        if(string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }
        
        //Weird data bug, some games have a null genre in db
        if(data.Genre == null)
        {
            return false;
        }

        if(data.Genre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if(data.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    public void ChangeCompletedGamesToggle(bool toggledStatus)
    {
        if(!toggledStatus && !hideInProgress) //If they're both toggled off clear the filter
        {
            DataInTable = TableData;
            hideCompleted = toggledStatus;
            StateHasChanged();
            return;
        }

        if(!toggledStatus && hideInProgress) //If it was toggled off and the hide in progress is still toggled on then clear the games competed filter
        {
            DataInTable = TableData.Where(x => x.GamePercentage == 0 || x.GamePercentage == 1).ToList();
            hideCompleted = toggledStatus;
            StateHasChanged();
            return;
        }

        if(toggledStatus  && !hideInProgress) //If toggled on and hide in progress is toggled off then only filter out completed
        {
            DataInTable = TableData.Where(x => x.GamePercentage != 1).ToList();
            hideCompleted = toggledStatus;
            StateHasChanged();
            return;
        }

        if(toggledStatus && hideInProgress) //If they're both toggled on then apply both the filters
        {
            DataInTable = TableData.Where(x => x.GamePercentage != 1 && x.GamePercentage == 0).ToList();
            hideCompleted = toggledStatus;
            StateHasChanged();
            return;
        }
    }

    public void ChangeInProgressToggle(bool toggledStatus)
    {
        if(!toggledStatus && !hideCompleted) //If they're both toggled off clear the filter
        {
            DataInTable = TableData;
            hideInProgress = toggledStatus;
            StateHasChanged();
            return;
        }

        if(!toggledStatus && hideCompleted) //If it was toggled off and the hide completed is still toggled on then clear the games in progress filter
        {
            DataInTable = TableData.Where(x => x.GamePercentage != 1).ToList();
            hideInProgress = toggledStatus;
            StateHasChanged();
            return;
        }

        if(toggledStatus  && !hideCompleted) //If toggled on and completed is toggled off then only filter out in progress
        {
            DataInTable = TableData.Where(x => x.GamePercentage == 0 || x.GamePercentage == 1).ToList();
            hideInProgress = toggledStatus;
            StateHasChanged();
            return;
        }

        if(toggledStatus && hideCompleted) //If they're both toggled on then apply both the filters
        {
            DataInTable = TableData.Where(x => x.GamePercentage != 1 && x.GamePercentage == 0).ToList();
            hideInProgress = toggledStatus;
            StateHasChanged();
            return;
        }
    }

    private async Task OpenGameModal(TableRowClickEventArgs<TableData> row)
    {
        GameData game;

        if(LoggedIn)
        {
            game = await GameDataModalService.GetLoggedInDataToPopulateModal(row.Item.Id, LoggedInUser);
        }
        else
        {
            game = await GameDataModalService.GetGameDataToPopulateModal(row.Item.Id);
        }

        if (game == null)
        {
            Snackbar.Add("Failed to get game info", Severity.Error);
            return;
        }

        var parameters = new DialogParameters { ["GameDataModal"] = game, ["LoggedIn"] = LoggedIn, ["LoggedInUser"] = LoggedInUser };
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = DialogService.Show<GameDialog>("Game Info", parameters, options);
    }

}
